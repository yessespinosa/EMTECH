# -*- coding: utf-8 -*-
"""PROYECTO-01- ESPINOSA-ANAYESSICA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aN08o_zPAefTNluH2H031Ia9e9A73-tZ

# EMTECH. Proyecto 1
## Introducción a Python

LifeStore es una tienda virtual que maneja una amplia gama de artículos recientemente, la Gerencia de ventas, se percató que la empresa tiene una importante acumulación de inventario. Asimismo, se ha identificado una reducción en las búsquedas de un grupo importante de productos, lo que ha redundado en una disminución sustancial de sus ventas del último trimestre.
"""

# Importamos librerías 
import pandas as pd
import numpy as np
# Importamos archivo de datos 
from lifestore_file import lifestore_products, lifestore_sales, lifestore_searches

# Dataframe de ventas 
matriz_sales = np.array(lifestore_sales)
df_sales = pd.DataFrame(matriz_sales, columns=['id_sale','id_product','score','date','refund']) 
# lifestore_sales = [id_sale, id_product, score (from 1 to 5), date, refund (1 for true or 0 to false)] Refund = reembolso 
df_sales["id_sale"] = pd.to_numeric(df_sales["id_sale"])
df_sales["id_product"] = pd.to_numeric(df_sales["id_product"])
df_sales["score"] = pd.to_numeric(df_sales["score"])
df_sales["refund"] = pd.to_numeric(df_sales["refund"])
df_sales["date"] = pd.to_datetime(df_sales["date"])
df_sales.head()

df_sales.dtypes

# Dataframe de productos
matriz_products = np.array(lifestore_products)
df_products = pd.DataFrame(matriz_products, columns=['id_product','name','price','category','stock'])
df_products["id_product"] = pd.to_numeric(df_products["id_product"])
df_products["price"] = pd.to_numeric(df_products["price"])
df_products["stock"] = pd.to_numeric(df_products["stock"])
df_products.head()

df_products.dtypes

# Dataframe de búsquedas
matriz_searches = np.array(lifestore_searches)
df_searches = pd.DataFrame(matriz_searches, columns=['id_search','id_product'])
# ---- lifestore_searches = [id_search, id product]
df_searches["id_search"] = pd.to_numeric(df_searches["id_search"])
df_searches["id_product"] = pd.to_numeric(df_searches["id_product"])
df_searches.head()

df_searches.dtypes

# Ventas
df_ventas = df_sales.groupby(by="id_product").count()
df_ventas = df_ventas.drop(['score','date','refund'], axis=1)
df_ventas = df_ventas.set_axis(['ventas'], axis=1)
df_ventasc = pd.merge(df_products,df_ventas, on='id_product')

# Búsquedas
df_busquedas = df_searches.groupby(by="id_product").count()
df_busquedas = df_busquedas.set_axis(['busquedas'], axis=1)
df_busquedasc = pd.merge(df_products,df_busquedas, on='id_product')

"""### 1. Productos más vendidos y productos rezagados"""

# Productos más vendidos 
df_masvendidos = df_ventasc.sort_values(by='ventas', ascending=False).head(5)
df_masvendidos

# Productos con mayor número de búsquedas 
df_masbuscados = df_busquedasc.sort_values(by='busquedas', ascending=False).head(10)
df_masbuscados

# Productos con menores ventas
df_menosvendidos = df_ventasc.sort_values(by='ventas', ascending=True).head(5)
df_menosvendidos

# Productos con menor número de búsquedas 
df_menosbuscados = df_busquedasc.sort_values(by='busquedas', ascending=True).head(10)
df_menosbuscados

"""### 2. Productos por reseña en el servicio

"""

# Reseñas
df_resenas = df_sales.groupby(by=["id_product","score"], as_index=False).count()
df_resenas = df_resenas.set_axis(['id_product','score','resenas','calificacion','promedio'], axis=1)
df_resenas["id_product"] = pd.to_numeric(df_resenas["id_product"])
df_resenas["score"] = pd.to_numeric(df_resenas["score"])
df_resenas["calificacion"] = df_resenas["resenas"]*df_resenas["score"]
df_resenas = df_resenas.groupby(by="id_product").sum()
df_resenas["promedio"] = df_resenas["calificacion"]/df_resenas["resenas"]
df_resenas = pd.merge(df_products,df_resenas, on='id_product')
df_resenas = df_resenas.filter(['id_product','name','promedio'])

# Productos con mejores reseñas 5
df_mejoresscore = df_resenas.sort_values(by='promedio', ascending=False).head(5)
df_mejoresscore

# Productos con peores reseñas
df_peorscore = df_resenas.sort_values(by='promedio', ascending=True).head(5)
df_peorscore

"""### 3. Total de ingresos y ventas promedio mensuales, total anual y meses con más ventas en el año"""

# Ingresos (quitando devoluciones)
df_sale = df_sales
df_sale['mes'] = df_sale['date'].dt.strftime('%m')
df_sale['anio'] = df_sale['date'].dt.strftime('%Y')
df_sale = df_sale[df_sale['refund'] == 0]
df_sale = pd.merge(df_sale, df_products, on='id_product')

# Total de ingresos anuales
df_ingresos = df_sale.groupby(by=['anio']).sum()
df_ingresos.filter(['price'])

# Total de ventas anuales
df_ingresos = df_sale.groupby(by=['anio']).count()
df_ingresos.filter(['price'])

# Total de ingresos mensuales
df_ingresos = df_sale.groupby(by=['mes']).sum()
df_ingresos.filter(['price'])

# Total de ventas mensuales
df_ingresos = df_sale.groupby(by=['mes']).count()
df_ingresos.filter(['price'])

# Meses con más ventas
df_ingresos = df_sale.groupby(by=['mes']).sum()
df_ingresos = df_ingresos.sort_values(by='price',ascending=False)
df_ingresos.filter(['price'])

# Autenticación 
usuario = 'yess'
contra = 'yess'
intentos = 0
acceso = False

while not acceso:
  intentos +=1
  if intentos ==4:
    exit()
  if input('Usuario: ') == usuario and input('Contraseña: ') == contra:
    acceso = True
    print('Acceso autorizado')
  else: 
    print(f'Tienes {3 - intentos} intentos restantes')